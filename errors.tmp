BlockSha256.c: In function ‘final_sha’:
BlockSha256.c:120:24: warning: ‘return’ with a value, in function returning void
  120 |                 return digest;
      |                        ^~~~~~
BlockSha256.c:108:6: note: declared here
  108 | void final_sha(unsigned char *chunks, size_t total_length, uint32_t *digest) {
      |      ^~~~~~~~~
BlockSha256.c: In function ‘main’:
BlockSha256.c:7:25: error: expected ‘}’ before ‘;’ token
    7 | #define SQRT0 0x6a09e667;
      |                         ^
BlockSha256.c:141:30: note: in expansion of macro ‘SQRT0’
  141 |         uint32_t digest[] = {SQRT0, SQRT1, SQRT2, SQRT3, SQRT4, SQRT5, SQRT6, SQRT7};
      |                              ^~~~~
BlockSha256.c:141:29: note: to match this ‘{’
  141 |         uint32_t digest[] = {SQRT0, SQRT1, SQRT2, SQRT3, SQRT4, SQRT5, SQRT6, SQRT7};
      |                             ^
BlockSha256.c:149:27: warning: passing argument 1 of ‘sha_chunk’ from incompatible pointer type [-Wincompatible-pointer-types]
  149 |                 sha_chunk((uint32_t *)chunk, digest);
      |                           ^~~~~~~~~~~~~~~~~
      |                           |
      |                           uint32_t * {aka unsigned int *}
BlockSha256.c:98:31: note: expected ‘unsigned char *’ but argument is of type ‘uint32_t *’ {aka ‘unsigned int *’}
   98 | void sha_chunk(unsigned char *chunk, uint32_t *digest) {
      |                ~~~~~~~~~~~~~~~^~~~~
BlockSha256.c:152:29: error: ‘i’ undeclared (first use in this function)
  152 |         final_sha(&(argv[1]+i), strlen(argv[1]), digest);
      |                             ^
BlockSha256.c:152:29: note: each undeclared identifier is reported only once for each function it appears in
real 0.03
user 0.02
sys 0.00
make: *** [Makefile:2: binary] Error 1
